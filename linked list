#include <iostream> //File Header Iostream
#include <math.h> //File Header Math
#include <conio.h> //File Header Conio
#include <stdio.h>

using namespace std;

struct ListNode { //Deklarasi Linked List
int data;   
ListNode *next;
};  

ListNode *head, *tail;  //deklarasi pointer dalam linked list

void init(){  //Fungsi untuk inisialisasi awal linked list
head = NULL;
tail = NULL;  //Untuk pertama kali, head dan tail bernilai NULL
}

int isEmpty(){  //Fungsi untuk mengetahui apakah Linked list kosong atau ada isinya
if(tail == NULL) return 1;
else return 0;
}

void insertDepan(int databaru){
  ListNode *baru;
  baru = new ListNode;
  baru->data = databaru;
  baru->next = NULL;
  if(isEmpty()==1){
    head=tail=baru;
    tail->next=NULL;
    }
    else {
    baru->next = head;
    head = baru;
    }
    cout<<"Data masuk\n";
}

void hapusBelakang(){
	ListNode *bantu,*hapus;
	int d;
	if(isEmpty()==0){
		bantu=head;
		if(head!=tail){
			while(bantu->next!=tail){
				bantu=bantu->next;
			}
			hapus=tail;
			tail=bantu;
			d=hapus->data;
			delete hapus;
			tail->next=NULL;
		}else{
			d=tail->data;
			head=tail=NULL;
		}
	cout<<d<<" terhapus\n";
	}else cout<<"Masih kosong\n";
}


void tampil(){   //Fungsi untuk menampilkan linked list yang telah di input / di delete
	ListNode *bantu;  //pointer yang digunakan yaitu bantu
	bantu=head;  // Nilai bantu= Nilai yang ada di head
	if(isEmpty()==0){  // periksa apakah return 0(bernilai)
		while(bantu!=NULL){ //Selama bantu tidak sama dengan NULL, maka di eksekusi
			cout<<bantu->data<<endl;  // tampilkan di monitor nilai bantu->data
			bantu=bantu->next;  //Nilai bantu= nilai bantu selanjutnya
		}
	}else
		cout<<"Masih Kosong"<<endl;
}


void tambahBasing(int letak, int nilai){
	ListNode *before=new ListNode;
	ListNode *after=new ListNode;
	ListNode *baru=new ListNode;
	after=head;
	for(int i=1; i<letak;i++){
		before=after;
		after=after->next;
	}
	baru->data=nilai;
	before->next=baru;
	baru->next=after;
	after=baru;
	cout<<"\n\nData "<<nilai<<" Dimasukkan ke Posisi "<<letak<<endl;
  }
void tambahBelakang(int databaru){
	ListNode *baru,*bantu;
	baru=new ListNode;
	baru->data = databaru;
	baru->next = NULL;
	
	if(isEmpty()==1){
		head=baru;
		tail=baru;
		tail->next=NULL;
	}else{
		tail->next=baru;
		tail=baru;
	}
	cout<<"Data masuk\n";
}

void hapusDepan(){
	ListNode *hapus;
	int d;
	if(isEmpty()==0){
		if(head!=tail){
			hapus=head;
			d=hapus->data;
			head=head->next;
			delete hapus;
		}else{
			d=tail->data;
			head=tail=NULL;
		}
	cout<<"%d terhapus\n",d;
	}else cout<<"Masih kosong\n";
}
void hapusYangDiinginkan(int databaru){
	ListNode *bantu,*hapus;
	int a;
	if(isEmpty()==0){
		if(head!=tail){
			hapus=bantu;
			a=hapus->data;
			head=head->next;
			delete hapus;
		}else{
			a=tail->data;
			head=tail=NULL;
		}
		cout<<"%d terhapus\n",a;
	}else printf("Masih kosong\n");
}

void hapusBelakang(){
	ListNode *bantu,*hapus;
	int d;
	if(isEmpty()==0){
		bantu=head;
		if(head!=tail){
			while(bantu->next!=tail){
				bantu=bantu->next;
			}
			hapus=tail;
			tail=bantu;
			d=hapus->data;
			delete hapus;
			tail->next=NULL;
		}else{
			d=tail->data;
			head=tail=NULL;
		}
	cout<<d<<" terhapus\n";
	}else cout<<"Masih kosong\n";
}

void tampil(){   		//Fungsi untuk menampilkan linked list yang telah di input / di delete
	ListNode *bantu; 	//pointer yang digunakan yaitu bantu
	bantu=head;  		// Nilai bantu= Nilai yang ada di head
	if(isEmpty()==0){  	// periksa apakah return 0(bernilai)
		while(bantu!=NULL){ 			//Selama bantu tidak sama dengan NULL, maka di eksekusi
			cout<<bantu->data<<endl;  	// tampilkan di monitor nilai bantu->data
			bantu=bantu->next;  		//Nilai bantu= nilai bantu selanjutnya
		}
	}else
		cout<<"Masih Kosong"<<endl;
}
